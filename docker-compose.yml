version: '3.8'

services:

  nginx:
    build:
      context: nginx/
      args:
        NGINX_VERSION: $NGINX_VERSION
    hostname: nginx
    container_name: nginx
    volumes:
      - type: bind
        source: ./nginx/config/conf.d
        target: /etc/nginx/conf.d/
        read_only: true
    ports:
      - "80:80"
    networks:
      - garuss-network
    depends_on:
      - elasticsearch
      - alertmanager
      - prometheus
      - prometheus-fed
      - jenkins
      - kibana
      - grafana
      - keycloak
      - gitlab

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    hostname: elasticsearch
    container_name: elasticsearch
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch-data
        target: /usr/share/elasticsearch/data
#    ports:
#      - "9200:9200"
#      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      discovery.type: single-node
    networks:
      - garuss-network

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    hostname: logstash
    container_name: logstash
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
#    ports:
#      - "5044:5044"
#      - "5001:5000"
#      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - garuss-network
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    hostname: kibana
    container_name: kibana
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
#    ports:
#      - "5601:5601"
    networks:
      - garuss-network
    depends_on:
      - elasticsearch

  fluentd:
    build:
      context: fluentd/
      args:
        FLUENTD_VERSION: $FLUENTD_VERSION
    hostname: fluentd
    container_name: fluentd
    ports:
      - "24224:24224" # Workaround 
#      - "24224:24224/udp"
    volumes:
      - type: bind
        source: ./fluentd/config/fluent.conf
        target: /fluentd/etc/fluent.conf
        read_only: true
    networks:
      - garuss-network
    depends_on:
      - elasticsearch

  grafana:
    build:
      context: grafana/
      args:
        GRAFANA_VERSION: $GRAFANA_VERSION
    hostname: grafana
    container_name: grafana
#    ports:
#      - 9000:3000
    volumes:
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
      - type: bind
        source: ./grafana/config/grafana.ini
        target: /etc/grafana/grafana.ini
      - type: bind
        source: ./grafana/config/datasources
        target: /etc/grafana/provisioning/datasources
    networks:
      - garuss-network
    depends_on:
      - prometheus

  prometheus:
    build:
      context: prometheus/prometheus/
      args:
        PROMETHEUS_VERSION: $PROMETHEUS_VERSION
    hostname: prometheus
    container_name: prometheus
#    ports:
#      - "9090:9090"
    volumes:
      - type: bind
        source: ./prometheus/prometheus/config/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
    networks:
      - garuss-network
    depends_on:
      - prometheus-fed

  prometheus-fed:
    build:
      context: prometheus/prometheus/
      args:
        PROMETHEUS_VERSION: $PROMETHEUS_VERSION
    hostname: prometheus-fed
    container_name: prometheus-fed
#    ports:
#      - "9091:9090"
    volumes:
      - type: bind
        source: ./prometheus/prometheus/config-fed/prometheus.yml
        target: /etc/prometheus/prometheus.yml
        read_only: true
      - type: bind
        source: ./prometheus/prometheus/config-fed/rules.yml
        target: /etc/prometheus/rules.yml
        read_only: true
      - type: bind
        source: ./prometheus/prometheus/config-fed/credentials
        target: /etc/prometheus/credentials
        read_only: true
    networks:
      - garuss-network

  alertmanager:
    build:
      context: prometheus/alertmanager/
      args:
        ALERTMANAGER_VERSION: $ALERTMANAGER_VERSION
    hostname: alertmanager
    container_name: alertmanager
#    ports:
#      - "9093:9093"
    volumes:
      - type: bind
        source: ./prometheus/alertmanager/config/alertmanager.yml
        target: /etc/alertmanager/alertmanager.yml
        read_only: true
    networks:
      - garuss-network

  blackbox:
    build:
      context: prometheus/exporters/blackbox-exporter/
      args:
        BLACKBOX_VERSION: $BLACKBOX_VERSION
    hostname: blackbox
    container_name: blackbox
#    ports:
#      - "9115:9115"
    volumes:
      - type: bind
        source: ./prometheus/exporters/blackbox-exporter/config/config.yml
        target: /etc/blackbox_exporter/config.yml
        read_only: true
    networks:
      - garuss-network

  jenkins:
    build:
      context: jenkins/master
      args:
        JENKINS_VERSION: $JENKINS_VERSION
    hostname: jenkins
    container_name: jenkins
#    ports:
#      - "8082:8080"
#      - "50000:50000"
    volumes:
      - type: volume
        source: jenkins-data
        target: /var/jenkins_home
    networks:
      - garuss-network
    depends_on:
      - fluentd
    logging:
      driver: fluentd
      options:
        fluentd-address: "tcp://docker.for.mac.localhost:24224" # mac
        # fluentd-address: "tcp://fluentd:24224" # linux

  jenkins-agent:
    build:
      context: jenkins/agent/
      args:
        JENKINS_AGENT_VERSION: $JENKINS_AGENT_VERSION
    hostname: jenkins-agent
    container_name: jenkins-agent
    environment:
      JENKINS_URL: http://jenkins:8080/
      JENKINS_SECRET: 27e1fca2c9ad041771f30eeedc0f47a3542123611e4f631ebb88016c65f3b5d4 # token
      JENKINS_AGENT_NAME: Test
      JENKINS_AGENT_WORKDIR: /home/jenkins/agent
    volumes:
      - type: volume
        source: jenkins-agent-data
        target: /home/jenkins/agent
    networks:
      - garuss-network
    depends_on:
      - jenkins

  vault:
    build:
      context: ./vault
      args:
        VAULT_VERSION: $VAULT_VERSION
    hostname: vault
    container_name: vault
#    ports:
#      - 8200:8200
    volumes:
      - type: volume
        source: vault-data
        target: /vault/data
      - type: bind
        source: ./vault/config
        target: /vault/config
      - type: bind
        source: ./vault/policies
        target: /vault/policies
    command: "server"
    cap_add:
      - IPC_LOCK
    networks:
      - garuss-network
    depends_on:
      - consul

  consul:
    build:
      context: ./consul
      args:
        CONSUL_VERSION: $CONSUL_VERSION
    hostname: consul
    container_name: consul
#    ports:
#      - 8500:8500
    command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect 1 -config-file=/consul/config/config.json
    volumes:
      - type: volume
        source: consul-data
        target: /consul/data
      - type: bind
        source: ./consul/config
        target: /consul/config
    networks:
      - garuss-network

  postgres-keycloak:
    build:
      context: ./keycloak/postgres
      args:
        KEYCLOAK_POSTGRES_VERSION: $KEYCLOAK_POSTGRES_VERSION
    hostname: postgres-keycloak
    container_name: postgres-keycloak
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    volumes:
      - type: volume
        source: keycloak-postgress-data
        target: /var/lib/postgresql/data
    networks:
      - garuss-network

  keycloak:
    build:
      context: ./keycloak/keycloak
      args:
        KEYCLOAK_VERSION: $KEYCLOAK_VERSION
    hostname: keycloak
    container_name: keycloak
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      PROXY_ADDRESS_FORWARDING: true
      KEYCLOAK_FRONTEND_URL: http://keycloak.grauss.local/auth
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
#    ports:
#      - 8080:8080
    depends_on:
      - postgres-keycloak
    networks:
      - garuss-network

  gitlab:
    build:
      context: ./gitlab
      args:
        GITLAB_VERSION: $GITLAB_VERSION
    hostname: gitlab
    container_name: gitlab
#    ports:
#      - '80:80'
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://gitlab.grauss.local'
        # Add any other gitlab.rb configuration here, each on its own line
    volumes:
      - type: volume
        source: gitlab-data
        target: /var/opt/gitlab
      - type: bind
        source: ./gitlab/config
        target: /etc/gitlab
      - type: bind
        source: ./gitlab/logs
        target: /var/log/gitlab
    networks:
      - garuss-network

networks:
  garuss-network:
    driver: bridge

volumes:
  elasticsearch-data:
  grafana-data:
  gitlab-data:
  jenkins-data:
  jenkins-agent-data:
  vault-data:
  consul-data:
  keycloak-postgress-data: